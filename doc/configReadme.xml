<?xml version='1.0' encoding='utf-8'?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Salesforce Account Broadcast</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce administrator I want to synchronize accounts between two Salesforce organizations.

This template serves as a foundation for setting an online sync of accounts from one Salesforce instance to another. Each time there is new account or a change in an existing one, the integration  polls for changes in Salesforce source instance and it's responsible for updating the account on the target org.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this template leverages the Mule batch module.
The batch job is divided into Process and On Complete stages.
The integration is triggered by a scheduler defined in the flow that triggers the application, querying newest Salesforce updates or creations matching a filter criteria and executes the batch job.
During the Process stage, each Salesforce account is filtered depending on if it has an existing matching account in the Salesforce Org B.
The last step of the Process stage groups the accounts and creates or updates them in Salesforce Org B.
Finally during the On Complete stage the template logs output statistics data to the console.
		</section>
		<section id="considerations">

To make this template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source and destination systems, that must be made for all to run smoothly. Failing to do so can lead to unexpected behavior of the template.

		</section>
		<section id="run_it">

See below.

		</section>
		<section id="default_running_on_premise">

In this section we detail how to run your template on your computer.

Once your app is all set and started, there is no need to do anything else. The application polls an account to know if there are any newly created or updated objects and synchronizes them.

		</section>
		<section id="default_running_on_cloudhub">

While creating your application in CloudHub (or you can do it later as a next step), you need to go to Deployment > Advanced to set all environment variables detailed in "Properties to Configure" as well as in the **mule.env**. 

Once your app is all set and started, there is no need to do anything else. Every time an account is created or modified, it's automatically synchronized to Salesforce Org B as long as it has an email.

		</section>
		<section id="application_configuration">
		
**Application Configuration**

+ http.port `9090` 
+ page.size `100` 
+ scheduler.frequency `60000`
+ scheduler.start.delay `0`
+ watermark.default.expression `YESTERDAY`
+ trigger.policy `push` | `poll`

**Salesforce Connector Configuration for Company A**

+ sfdc.a.username `bob.dylan@orga`
+ sfdc.a.password `DylanPassword543`
+ sfdc.a.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**Salesforce Connector Configuration for Company B**

+ sfdc.b.username `joan.baez@orgb`
+ sfdc.b.password `JoanBaez456`
+ sfdc.b.securityToken `ces56arl7apQs56XTddf34X`

		</section>
		<section id="api_calls">
		
Salesforce imposes limits on the number of API calls that can be made. Therefore calculating this amount is important. The template calls to the API can be calculated using the formula:

***1 + X + X / 200***

***X*** is the number of accounts to be synchronized on each run. 

Divide by ***200*** because by default, accounts are gathered in groups of 200 for each upsert API call in the commit step. Also consider that calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from the origin instance, then 12 API calls are made (1 + 10 + 1).

		</section>
		<section id="default_business_logic_xml">
		
The functional aspect of the template is implemented in this XML file, directed by a flow that's responsible for Salesforce creations or updates. The message processors constitute four high level actions that fully implement the logic of this template:

1. During the Input stage, the template goes to the Salesforce Org A and queries all the existing accounts that match the filter criteria.
2. During the Process stage, each Salesforce account is filtered depending on if it has an existing matching account in the Salesforce Org B.
3. The last step of the Process stage groups the accounts and creates or updates them in Salesforce Org B.
4. Finally during the On Complete stage, the template logs output statistics data on the console.

		</section>
		<section id="default_endpoints_xml">

This file contains three flows:

1. The **push** flow contains an HTTP endpoint that listens for notifications from Salesforce. Each notification is processed and updates or creates accounts, and then executes the batch job process.
2. The **scheduler** flow contains the Scheduler endpoint that periodically triggers the **sfdcQuery** flow and executes the batch job process.
3. The **sfdcQuery** flow contains watermarking logic that queries Salesforce for updated or created accounts that meet the defined criteria in the query since the last polling. The last invocation timestamp is stored by using Objectstore Component and updated after each Salesforce query.

The property **trigger.policy** is the one in charge of defining from which endpoint the template  receives data. The property can only assume one of two values `push` or `poll`. Any other value results in the template ignoring all messages.

		</section>
	</sections>
</configuration>
